@using RomMaster.Client.Database.Models
@using RomMaster.WebSite.App.Models
@using RomMaster.WebSite.App.Components
@using RomMaster.WebSite.App.Services

@page "/datlist"
@inject IHttpClientFactory clientFactory

<h1>Dat List</h1>

<p>(top 100)</p>

<Grid Options="@gridOptions" DataSource="@dataSource"/>

@functions {
    GridOptions<Dat> gridOptions;
    DataSource<Dat> dataSource;

    protected override void OnInit()
    {
        gridOptions = new GridOptions<Dat>
        {
            Columns = new GridColumn<Dat>[] {
        new GridSelectColumn<Dat> { Bind = new Func<GenericViewModel<Dat>, bool>(a => a.IsSelected) },
        new GridTextColumn<Dat> { Caption = "Id", Bind = new Func<GenericViewModel<Dat>, int>(a => a.Item.Id) },
        new GridTextColumn<Dat> { Caption = "Date", Bind = new Func<GenericViewModel<Dat>, string>(a => a.Item.Date?.ToString("yyyy-MM-dd")) },
        new GridTextColumn<Dat> { Caption = "Name", Bind = new Func<GenericViewModel<Dat>, string>(a => a.Item.Name) },
        new GridTextColumn<Dat> { Caption = "Version", Bind = new Func<GenericViewModel<Dat>, string>(a => a.Item.Version) },
        new GridTextColumn<Dat> { Caption = "Author", Bind = new Func<GenericViewModel<Dat>, string>(a => a.Item.Author) },
        new GridTextColumn<Dat> { Caption = "Category", Bind = new Func<GenericViewModel<Dat>, string>(a => a.Item.Category) },
        new GridTextColumn<Dat> { Caption = "Description", Bind = new Func<GenericViewModel<Dat>, string>(a => a.Item.Description) },
        new GridTextColumn<Dat> { Caption = "File", Bind = new Func<GenericViewModel<Dat>, string>(a => a.Item.File.Path) },
        new GridTextColumn<Dat> { Caption = "Games", Bind = new Func<GenericViewModel<Dat>, int>(a => a.Item.Games.Count) }
            }
        };

        dataSource = new RomMaster.WebSite.App.Services.DataSource<Dat>(clientFactory, "/api/datlist");
    }

    /*
    bool selectAll;
    private bool SelectAll
    {
        get { return selectAll; }
        set { selectAll = value; SelectAllChanged(value); }
    }

    List<GenericViewModel<Dat>> list;

    protected override async Task OnInitAsync()
    {
        var http = clientFactory.CreateClient("default");
        list = (await http.GetJsonAsync<Dat[]>("/api/datlist"))
            .Select(a => new GenericViewModel<Dat>(a))
            .ToList();
    }

    private void SelectAllChanged(bool value)
    {
        foreach (var model in list)
        {
            model.IsSelected = value;
        }

        StateHasChanged(); // DOES NOT RE-RENDER THE PAGE!!!
    }

    private void SelectChanged(GenericViewModel<Dat> model, bool value)
    {
        model.IsSelected = value;
        SelectAll = list.All(a => a.IsSelected);
    }
    */
}
